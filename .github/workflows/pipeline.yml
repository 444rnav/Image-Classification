name: Image Classification Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    name: Run security scans
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure entire history is fetched for accurate scans

      # Run gitleaks to scan for sensitive data in the repository
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for accessing repository

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11  # Specify Python version needed for your project

      # Install and run Bandit for Python code security analysis
      - name: Install and run Bandit
        run: |
          pip install bandit
          bandit -r .

      # Install and run pip-audit to check vulnerabilities in Python dependencies
      - name: Install and run pip-audit
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt

  build_scan_and_push_image:
    name: Build, Scan and Push Image
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
        
      # Build the Docker image
      - name: Build Docker Image
        run: docker build -f Dockerfile -t nithinpj09/classifier:v1.0 .

      # Run Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'nithinpj09/classifier:v1.0'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push nithinpj09/classifier:v1.0

  Deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy
        env:
            PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
            HOST_NAME: ${{secrets.HOST_NAME}}
            USER_NAME: ${{secrets.USER_NAME}}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} '
              pwd &&
              ls
              '
